Part-1(Questionaries)



Using simple code, explain what kind of situations would you use the methods:
i. GET ii. POST iii. PUT

Answer.ii



What kind of “authentication” works best for a web service that needs to be secure and
easy to implement across different programming languages. Provide an example of how
to call this API.


4 Most Used Authentication Methods

1. HTTP Authentication Schemes (Basic & Bearer)
2. API Keys
3. OAuth (2.0)
4. OpenID Connect

Example 
1. HTTP Authentication Schemes (Basic & Bearer)
   The HTTP Protocol also defines HTTP security auth schemes like:

Basic 
Bearer 
Digest
OAuth
and others...


2. API Keys
   API Keys were created as somewhat of a fix to the early authentication issues of HTTP Basic Authentication and other such systems. In this method, a unique generated value is assigned to each first time user, signifying that the user is known. When the user attempts to re-enter the system, their unique key (sometimes generated from their hardware combination and IP data, and other times randomly generated by the server which knows them) is used to prove that they’re the same user as before.
   Authorization: Apikey 1234567890abcdef.

3. OAuth (2.0)
   The most common implementations of OAuth use one or both of these tokens instead:

access token: sent like an API key, it allows the application to access a user’s data; optionally, access tokens can expire.
refresh token: optionally part of an OAuth flow, refresh tokens retrieve a new access token if they have expired. OAuth2 combines Authentication and Authorization to allow more sophisticated scope and validity control.

4. OpenID Connect
         
    OpenID Connect is a simple identity layer on top of the OAuth 2.0 protocol, which allows computing clients to verify the identity of an end-user based on the authentication performed by an authorization server, as well as to obtain basic profile information about the end-user in an interoperable and REST-like manner.

In technical terms, OpenID Connect specifies a RESTful HTTP API, using JSON as a data format.


3.What kind of format is best to be returned by an API as a response? Explain your
answer and provide comparisons, if needed.  

The action should be indicated by the HTTP request method that we’re making. The most common methods include GET, POST, PUT, and DELETE.

GET retrieves resources.
POST submits new data to the server.
PUT updates existing data.
DELETE removes data.


With the two principles we discussed above in mind, we should create routes like GET /articles/ for getting news articles. Likewise, POST /articles/ is for adding a new article , PUT /articles/:id is for updating the article with the given id. DELETE /articles/:id is for deleting an existing article with the given ID.

/articles represents a REST API resource. For instance, we can use Express to add the following endpoints for manipulate articles as follows:

const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());

app.get('/articles', (req, res) => {
  const articles = [];
  // code to retrieve an article...
  res.json(articles);
});

app.post('/articles', (req, res) => {
  // code to add a new article...
  res.json(req.body);
});

app.put('/articles/:id', (req, res) => {
  const { id } = req.params;
  // code to update an article...
  res.json(req.body);
});

app.delete('/articles/:id', (req, res) => {
  const { id } = req.params;
  // code to delete an article...
  res.json({ deleted: id });
});

app.listen(3000, () => console.log('server started'));





What is the main difference between GraphQL and REST?
REST and GraphQL are two API design approaches that fulfill the same function: data transmission via internet protocols such as HTTP. However, how they do so varies significantly. GraphQL is a query language, whereas REST is an architectural pattern.




5. List some common ways to reduce the load time of a web application?
1.Choose a performance-optimized hosting solution. ...
2.Compress and optimize your images. ...
3.Reduce your redirects. ...
4.Cache your web pages. ...
5.Enable browser caching. ...
6.Use asynchronous and defer loading for your CSS and JavaScript files. ...
7.Minify CSS, JavaScript, and HTML.


6. Explain in your own words, What is CORS?

  Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a "preflight" request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.

  An example of a cross-origin request: the front-end JavaScript code served from https://domain-a.com uses XMLHttpRequest
  to make a request for https://domain-b.com/data.json.



Part-2(Client Requirements)



System Requirement-Eclipse IDE Software from this link(https://www.eclipse.org/downloads/packages/release/2021-09/r/eclipse-ide-java-developers)





Coding

package project;

import java.math.BigInteger;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.Scanner;

public class vehicaleParking {

	public static void main(String[] args) throws ParseException {

		SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		Date date = new Date();
		System.out.println("Today Date and Time:" + formatter.format(date));

		Calendar c1 = Calendar.getInstance();
		c1.setTime(date);

		DateFormat dateFormat = new SimpleDateFormat("hh.mm aa");
		String dateString = dateFormat.format(new Date()).toString();

		// Displaying current date and time in 12 hour format with AM/PM
		DateFormat dateFormat2 = new SimpleDateFormat("dd/MM/yyyy hh.mm aa");
		String dateString2 = dateFormat2.format(new Date()).toString();

		DateFormat dateFormat3 = new SimpleDateFormat("dd/MM/yyyy");
		String dateString3 = dateFormat3.format(new Date()).toString();
		
		
		
		if ((c1.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY) || (Calendar.DAY_OF_WEEK == Calendar.SUNDAY)) { // or
																												// sunday
			System.out.println("DATE OF WEEKEND:" + dateString3);

			Scanner input = new Scanner(System.in);
			System.out.print("In (MM/DD/YYYY hh:mm aa): ");
			String time = input.nextLine();
			System.out.println();
			System.out.print("Please will not take into the count in time:\\n Out (MM/DD/YYYY hh:mm aa): ");
			String time2 = input.nextLine();
			System.out.println();

			SimpleDateFormat format = new SimpleDateFormat("MM/DD/YYYY hh:mm aa");
			Calendar c = Calendar.getInstance();

			c.setTime(format.parse(time));
			long startMillis = c.getTimeInMillis();
			int hou1 = c.getTime().getHours();
			int min1 = c.getTime().getMinutes();

			System.out.println("Start Hour" + hou1 + "  " + min1);

			c.setTime(format.parse(time2));
			long endMillis = c.getTimeInMillis();
			int hou2 = c.getTime().getHours();
			int min2 = c.getTime().getMinutes();
			System.out.println("End Hour" + hou2 + "  " + min2);
			double amountToPay = 0;
			if (hou1 >= 0 && hou2 <= 3)// First 3 Hours $5.00
			{
				amountToPay += 3;
				System.out.println("Amount to Paid:$" + amountToPay);
			} else if (hou1 <= 3 && hou2 <= 23 && min2 <= 59) {// Subsequent Hour $2.00

				amountToPay += 3 + 5;
				System.out.println("Amount to Paid:$" + amountToPay);
			} else {// Other

				System.out.println("Amount to Paid for first 3 hour:$" + 3);
				amountToPay += 1.5 + 3;
				System.out.println("Amount to Paid:$" + amountToPay);
			}

			long longVal = ((endMillis - startMillis) / 1000);
			int hours = (int) longVal / 3600;
			int remainder1 = (int) longVal - hours * 3600;
			int mins = remainder1 / 60;
			remainder1 = remainder1 - mins * 60;
			int secs = remainder1;

			System.out.print("Duration:" + hours + "hours " + mins + "minutes");

		} else {

			System.out.println("DATE OF WEEKDAY:" + dateString3);

			Scanner input = new Scanner(System.in);
			System.out.print("In (MM/DD/YYYY hh:mm aa): ");
			String time = input.nextLine();
			System.out.println();
			System.out.print("Please will not take 5 minute into the count for preparation exit time\n Out (MM/DD/YYYY hh:mm aa):  ");
			String time2 = input.nextLine();
			System.out.println();

			SimpleDateFormat format = new SimpleDateFormat("MM/DD/YYYY hh:mm aa");
			Calendar c = Calendar.getInstance();

			c.setTime(format.parse(time));
			long startMillis = c.getTimeInMillis();
			int hou1 = c.getTime().getHours();
			int min1 = c.getTime().getMinutes();

			c.setTime(format.parse(time2));
			long endMillis = c.getTimeInMillis();
			int hou2 = c.getTime().getHours();
			int min2 = c.getTime().getMinutes();

			double amountToPay = 0;
			
			long longVal = ((endMillis - startMillis) / 1000);
			int hours = (int) longVal / 3600;
			int remainder1 = (int) longVal - hours * 3600;
			int mins = remainder1 / 60;
			remainder1 = remainder1 - mins * 60;
			int secs = remainder1;
			if (hou1 >= 0 && hou2 <= 3)// First 3 Hours $3.00
			{
				amountToPay += 3;

				System.out.println("Duration:" + hours + "hours " + mins + "minutes");
				if(hours<=0 && mins<=15) {
					System.out.println("Amount to Paid:$" + 0);
				}else{
				System.out.println("Amount to Paid:$" + amountToPay);
				}
			} else if (hou1 > 0 && hou2 < 23) {// First 3 Hours $3.00+Subsequent Hour $1.50+5:30pm - 11:59pmper entry
												// $5.00

				amountToPay += 3 + 1.5 + 5;

				System.out.println("Duration:" + hours + "hours " + mins + "minutes");
				if(hours<=0 && mins<=15) {
					System.out.println("Amount to Paid:$" + 0);
				}else{
				System.out.println("Amount to Paid:$" + amountToPay);
				}
			} else if (hou1 >= 3 && hou2 < 23 && min2 < 59) {// Subsequent Hour $1.50+5:30pm - 11:59pmper entry $5.00

				amountToPay += 1.5 + 5;

				System.out.println("Duration:" + hours + "hours " + mins + "minutes");
				if(hours<=0 && mins<=15) {
					System.out.println("Amount to Paid:$" + 0);
				}else{
				System.out.println("Amount to Paid:$" + amountToPay);
				}
			} else if (hou1 >= 17 && min1 >= 30 && hou2 < 23 && min2 < 59) {// +5:30pm - 11:59pmper entry $5.00

				amountToPay += 5;

				System.out.println("Duration:" + hours + "hours " + mins + "minutes");
				if(hours<=0 && mins<=15) {
					System.out.println("Amount to Paid:$" + 0);
				}else{
				System.out.println("Amount to Paid:$" + amountToPay);
				}
			} else if (hou1 > 3 && hou2 <= 17 && min2 < 30) {// Subsequent Hour $1.50

				System.out.println("Amount to Paid for first 3 hour:$" + 3);
				amountToPay += 1.5;

				System.out.println("Duration:" + hours + "hours " + mins + "minutes");
				if(hours<=0 && mins<=15) {
					System.out.println("Amount to Paid:$" + 0);
				}else{
				System.out.println("Amount to Paid:$" + amountToPay);
				}
			}

		}
	}

}

